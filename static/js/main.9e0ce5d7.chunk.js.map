{"version":3,"sources":["api/index.js","components/Chart.js","components/CountrySelector.js","components/NumberBoard.js","components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["fetchCountryData","countryCode","a","axios","get","data","modifiedData","totalConfirmed","confirmed","value","totalDeaths","deaths","totalRecovered","recovered","newConfirmed","newDeaths","newRecovered","console","log","fetchDailyUpdate","fetchCountries","countries","Chart","state","dailyData","loadData","props","undefined","setState","this","prevProps","labels","map","moment","Date","format","datasets","Confirmed","label","borderColor","spanGaps","fill","Recovered","Deaths","backgroundColor","length","React","Component","CountrySelector","selectedCountry","countryList","onChange","e","target","onSubmit","renderCountries","country","key","iso2","name","fetchedData","Form","style","Group","controlId","Control","color","as","default","custom","NumberBoard","summaryData","Row","noGutters","Col","md","Card","className","start","end","duration","separator","Header","padding","App","error","countryName","onCountrySubmit","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9e0ce5d7.chunk.js","sourcesContent":["import axios from \"axios\";\nimport axiosRetry from \"axios-retry\";\n\nconst summaryUrl = \"https://api.covid19api.com/summary\";\nconst countriesUrl = \"https://covid19.mathdro.id/api/countries/\";\nconst countrySpecificUrl = \"https://api.covid19api.com/dayone/country/\";\n\nexport const fetchData = async () => {\n  try {\n    const {\n      data: {\n        Global: {\n          TotalConfirmed,\n          TotalDeaths,\n          TotalRecovered,\n          NewConfirmed,\n          NewDeaths,\n          NewRecovered,\n        },\n      },\n    } = await axios.get(summaryUrl);\n\n    const summaryData = {\n      totalConfirmed: TotalConfirmed,\n      totalDeaths: TotalDeaths,\n      totalRecovered: TotalRecovered,\n      newConfirmed: NewConfirmed,\n      newDeaths: NewDeaths,\n      newRecovered: NewRecovered,\n    };\n\n    return summaryData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCountryData = async (countryCode) => {\n  try {\n    const { data } = await axios.get(\n      \"https://covid19.mathdro.id/api/countries/\" + countryCode\n    );\n    const modifiedData = {\n      totalConfirmed: data.confirmed.value,\n      totalDeaths: data.deaths.value,\n      totalRecovered: data.recovered.value,\n      newConfirmed: 0,\n      newDeaths: 0,\n      newRecovered: 0,\n    };\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDailyUpdate = async (countryCode) => {\n  try {\n    const { data } = await axios.get(countrySpecificUrl + countryCode);\n    return data;\n  } catch (error) {}\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(countriesUrl);\n    console.log(\"data \", countries);\n    return countries;\n  } catch (error) {}\n};\n","import React from \"react\";\nimport { fetchDailyUpdate } from \"../api\";\nimport { Line } from \"react-chartjs-2\";\nimport moment from \"moment\";\n\nclass Chart extends React.Component {\n  state = {\n    dailyData: [],\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.countryCode !== this.props.countryCode) {\n      this.loadData();\n    }\n  }\n\n  loadData = async () => {\n    let dailyData = await fetchDailyUpdate(this.props.countryCode);\n    if (dailyData != undefined) {\n      this.setState({ dailyData });\n    }\n  };\n\n  render() {\n    const { dailyData } = this.state;\n    const data = {\n      labels: dailyData.map((data) => moment(data.Date).format(\"DD/MM/YYYY\")),\n      datasets: [\n        {\n          data: dailyData.map((data) => data.Confirmed),\n          label: \"Confirmed\",\n          borderColor: \"green\",\n          spanGaps: true,\n          fill: true,\n        },\n        {\n          data: dailyData.map((data) => data.Recovered),\n          label: \"Recovered\",\n          borderColor: \"orange\",\n          spanGaps: true,\n          fill: true,\n        },\n        {\n          data: dailyData.map((data) => data.Deaths),\n          label: \"Deaths\",\n          borderColor: \"red\",\n          backgroundColor: \"red\",\n          spanGaps: true,\n          fill: true,\n        },\n      ],\n    };\n    return <div>{dailyData.length > 1 ? <Line data={data} /> : null}</div>;\n  }\n}\n\nexport default Chart;\n","import React from \"react\";\nimport { fetchCountries } from \"../api\";\nimport { Form } from \"react-bootstrap\";\n\nclass CountrySelector extends React.Component {\n  state = {\n    selectedCountry: \"SE\",\n    countryList: [],\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchCountries();\n    if (fetchedData.length > 0) {\n      this.setState({ countryList: fetchedData });\n    }\n  }\n\n  onChange = (e) => {\n    console.log(e.target.value);\n    this.props.onSubmit(e.target.value);\n    this.setState({ selectedCountry: e.target.value });\n  };\n\n  renderCountries = () => {\n    const { countryList } = this.state;\n    console.log(countryList);\n    let output;\n    if (countryList.length > 0) {\n      output = countryList.map((country) => {\n        return (\n          <option key={country.iso2} value={country.iso2}>\n            {country.name}\n          </option>\n        );\n      });\n    } else {\n      output = <option>Loading...</option>;\n    }\n    return output;\n  };\n\n  render() {\n    return (\n      <Form style={{ backgroundColor: \"black\" }}>\n        <Form.Group\n          onChange={this.onChange}\n          controlId=\"countryForm.SelectCustom\"\n        >\n          <Form.Control\n            style={{ backgroundColor: \"black\", color: \"white\" }}\n            as=\"select\"\n            default=\"Sweden\"\n            custom\n          >\n            <option key=\"SE\" value=\"SE\">\n              Sweden\n            </option>\n            {this.renderCountries()}\n          </Form.Control>\n        </Form.Group>\n      </Form>\n    );\n  }\n}\n\nexport default CountrySelector;\n","import React from \"react\";\nimport { Card, Row, Col, Container } from \"react-bootstrap\";\nimport CountUp from \"react-countup\";\nimport { fetchCountryData } from \"../api\";\n\nclass NumberBoard extends React.Component {\n  state = {\n    summaryData: [],\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.countryCode !== this.props.countryCode) {\n      this.loadData();\n    }\n  }\n\n  loadData = async () => {\n    let summaryData = await fetchCountryData(this.props.countryCode);\n    if (summaryData != undefined) {\n      this.setState({ summaryData });\n    }\n  };\n\n  render() {\n    const { summaryData } = this.state;\n    console.log(summaryData);\n    if (!summaryData.totalConfirmed) {\n      return \"Loading\";\n    }\n    return (\n      <Row noGutters>\n        <Col md={4}>\n          <Card className=\"numberCard\" style={{ borderColor: \"green\" }}>\n            <h2 className=\"numberText\">\n              <CountUp\n                start={0}\n                end={summaryData.totalConfirmed}\n                duration={1.5}\n                separator=\",\"\n              />\n            </h2>\n\n            <h4>Confirmed</h4>\n          </Card>\n        </Col>\n\n        <Col md={4}>\n          <Card className=\"numberCard\" style={{ borderColor: \"orange\" }}>\n            <h2 className=\"numberText\">\n              <CountUp\n                start={0}\n                end={summaryData.totalRecovered}\n                duration={1.5}\n                separator=\",\"\n              />\n            </h2>\n\n            <h4>Recovered</h4>\n          </Card>\n        </Col>\n        <Col md={4}>\n          <Card className=\"numberCard\" style={{ borderColor: \"red\" }}>\n            <h2 className=\"numberText\">\n              <CountUp\n                start={0}\n                end={summaryData.totalDeaths}\n                duration={1.5}\n                separator=\",\"\n              />\n            </h2>\n            <h4>Deaths</h4>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default NumberBoard;\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nconst Header = (props) => {\n  return (\n    <Card style={{ padding: \"2% 0 2% 0\", backgroundColor: \"black\" }}>\n      <h1 className=\"headerText\">Covid-19 Dashboard | {props.countryCode}</h1>\n    </Card>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { Container } from \"react-bootstrap\";\nimport { Chart, CountrySelector, NumberBoard, Header } from \"./components\";\nimport { fetchData, fetchCountryData } from \"./api\";\n\nclass App extends React.Component {\n  state = {\n    error: \"er\",\n    countryCode: \"SE\",\n    countryName: \"Sweden\",\n  };\n\n  onCountrySubmit = (value) => {\n    this.setState({\n      countryCode: value,\n    });\n  };\n\n  render() {\n    const { countryCode, dailyData } = this.state;\n    return (\n      <Container className=\"homeContainer\">\n        <Header countryCode={countryCode} />\n        <NumberBoard data={this.state.summaryData} countryCode={countryCode} />\n        <CountrySelector onSubmit={this.onCountrySubmit} />\n        <Chart countryCode={countryCode} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}